
#include <stcp/stcp.h>

using namespace slank;


static void set_addr()
{
    dpdk_core& dpdk = core::instance().dpdk;
    struct stcp_sockaddr_in* sin;

    /* set ip addr */
    struct stcp_ifreq ifr;
    memset(&ifr, 0, sizeof ifr);
    sin = reinterpret_cast<stcp_sockaddr_in*>(&ifr.if_addr);
    sin->sin_addr = stcp_inet_addr(192, 168, 222, 10);
    dpdk.devices[0].ioctl(STCP_SIOCSIFADDR, &ifr);

    /* set hw addr */
    memset(&ifr, 0, sizeof ifr);
    ifr.if_hwaddr.sa_data[0] = 0x00;
    ifr.if_hwaddr.sa_data[1] = 0x11;
    ifr.if_hwaddr.sa_data[2] = 0x22;
    ifr.if_hwaddr.sa_data[3] = 0x33;
    ifr.if_hwaddr.sa_data[4] = 0x44;
    ifr.if_hwaddr.sa_data[5] = 0x55;
    dpdk.devices[0].ioctl(STCP_SIOCSIFHWADDR, &ifr);
}



static void add_arp_record()
{
    struct stcp_arpreq req;
    stcp_sockaddr_in* sin = reinterpret_cast<stcp_sockaddr_in*>(&req.arp_pa);

    req.arp_ifindex = 0;
    req.arp_ha = stcp_inet_hwaddr(0x74, 0x03, 0xbd, 0x13, 0x2c, 0xa6);
    sin->sin_addr = stcp_inet_addr(192, 168, 222, 1);
    core::instance().arp.ioctl(STCP_SIOCAARPENT, &req);

    req.arp_ifindex = 0;
    req.arp_ha = stcp_inet_hwaddr(0x74, 0x03, 0xbd, 0x3d, 0x78, 0x96);
    sin->sin_addr = stcp_inet_addr(192, 168, 222, 100);
    core::instance().arp.ioctl(STCP_SIOCAARPENT, &req);

}

static void send_packet_test_raw_dev()
{
    dpdk_core& dpdk = core::instance().dpdk;

    uint8_t buf[] = {
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xee, 0xee,
        0xee, 0xee, 0xee, 0xee, 0x08, 0x06, 0x00, 0x01,
        0x08, 0x00, 0x06, 0x04, 0x00, 0x01, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xc0, 0xa8, 0x00, 0x01,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xa8,
        0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };
    dpdk.devices[0].write(buf, sizeof(buf));
}

static void send_packet_test_eth_mod()
{
    ether_module& eth = core::instance().ether;

    uint8_t buf[] = {
#if 1
        0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee,
        0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee,
        0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee,
        0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee,
        0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee,
        0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee
#else
        
        0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xc0, 0xa8, 0xde, 0x64,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
#endif
    };

    stcp_sockaddr dst;
    stcp_sockaddr_in* sin = reinterpret_cast<stcp_sockaddr_in*>(&dst);
    sin->sin_fam = STCP_AF_INET;
    sin->sin_addr = stcp_inet_addr(192, 168, 222, 100);
    eth.sendto(buf, sizeof(buf), &dst);
}


int main(int argc, char** argv)
{
    try {
        core& s = core::instance();  
        s.init(argc, argv);

        /* start up routines */
        set_addr();
        add_arp_record();

        // send_packet_test_raw_dev();
        send_packet_test_eth_mod();

        s.run();
    } catch (std::exception& e) {
        printf("%s \n", e.what());
    }
}

